//
//  PSCover.swift
//  ProjectName
//
//  Created by AuthorName on 10/24/18.
//  Copyright Â© 2018 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import Cocoa

public class PSCover : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 612, height: 792),
                                                resizing: ResizingBehavior = .aspectFit,
                                                title: String,
                                                date: String,
                                                time: String) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 612, height: 792), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 612, y: resizedFrame.height / 792)


        //// Title Drawing
        let titleRect = NSRect(x: 158, y: 465, width: 295, height: 119)
        let titleTextContent = title
        let titleStyle = NSMutableParagraphStyle()
        titleStyle.alignment = .center
        let titleFontAttributes = [
            .font: NSFont(name: "Arial-BoldMT", size: 50)!,
            .foregroundColor: NSColor.black,
            .paragraphStyle: titleStyle,
        ] as [NSAttributedString.Key: Any]

        let titleTextHeight: CGFloat = titleTextContent.boundingRect(with: NSSize(width: titleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: titleFontAttributes).height
        let titleTextRect: NSRect = NSRect(x: titleRect.minX, y: titleRect.minY + (titleRect.height - titleTextHeight) / 2, width: titleRect.width, height: titleTextHeight)
        NSGraphicsContext.saveGraphicsState()
        titleRect.clip()
        titleTextContent.draw(in: titleTextRect.offsetBy(dx: 0, dy: 0.5), withAttributes: titleFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Date Drawing
        let dateRect = NSRect(x: 158, y: 265, width: 295, height: 58)
        let dateTextContent = date
        let dateStyle = NSMutableParagraphStyle()
        dateStyle.alignment = .center
        let dateFontAttributes = [
            .font: NSFont(name: "Arial-BoldMT", size: 34)!,
            .foregroundColor: NSColor.black,
            .paragraphStyle: dateStyle,
        ] as [NSAttributedString.Key: Any]

        let dateTextHeight: CGFloat = dateTextContent.boundingRect(with: NSSize(width: dateRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: dateFontAttributes).height
        let dateTextRect: NSRect = NSRect(x: dateRect.minX, y: dateRect.minY + (dateRect.height - dateTextHeight) / 2, width: dateRect.width, height: dateTextHeight)
        NSGraphicsContext.saveGraphicsState()
        dateRect.clip()
        dateTextContent.draw(in: dateTextRect.offsetBy(dx: 0, dy: 0), withAttributes: dateFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Time Drawing
        let timeRect = NSRect(x: 158, y: 207, width: 295, height: 58)
        let timeTextContent = time
        let timeStyle = NSMutableParagraphStyle()
        timeStyle.alignment = .center
        let timeFontAttributes = [
            .font: NSFont(name: "Arial-BoldMT", size: 34)!,
            .foregroundColor: NSColor.black,
            .paragraphStyle: timeStyle,
        ] as [NSAttributedString.Key: Any]

        let timeTextHeight: CGFloat = timeTextContent.boundingRect(with: NSSize(width: timeRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: timeFontAttributes).height
        let timeTextRect: NSRect = NSRect(x: timeRect.minX, y: timeRect.minY + (timeRect.height - timeTextHeight) / 2, width: timeRect.width, height: timeTextHeight)
        NSGraphicsContext.saveGraphicsState()
        timeRect.clip()
        timeTextContent.draw(in: timeTextRect.offsetBy(dx: 0, dy: 0), withAttributes: timeFontAttributes)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }




    @objc(PSCoverResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: NSRect, target: NSRect) -> NSRect {
            if rect == target || target == NSRect.zero {
                return rect
            }

            var scales = NSSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
